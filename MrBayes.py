# get information from best_scheme.nex file generated by IQtree modelfinder and write MrBayes block
# this script is inspired by https://github.com/brettc/partitionfinder/blob/42010508ea382c6450b114c32827ace8727a9d9d/partfinder/model_utils.py#L79 script for converting into MrBayes for partitionfinder

"""
Script by Kristine Nørtoft Kristensen
Edited by August Søndergaard
"""

import os, argparse #gør det muligt at oprette argumenter (tillader at tage filer udenfor scriptet) (os=kan bruge stier til filer)
os.chdir("/home/augusthcs/Bachelorprojekt/MBr/") #skifter arbejdsmappe

parser = argparse.ArgumentParser() 
parser.add_argument("genes")
args = parser.parse_args()
genes = str(args.genes) #sikrer at generne kommer som en streng

charset=open("/home/augusthcs/Bachelorprojekt/IQtree/"+genes+".part.best_scheme.nex").readlines() #åbner genfilerne og læser dem linje for linje og laver strings med hver linje (flyt dine part.best_scheme)

partitions_intron=str(charset[2]).split() #opretter introns ved at splitte ved 3 linje i charset 
partitions_exon= str(charset[3]).split()
partitions= "" #opretter tomme strenge
names=""
bases_intron=[] #opretter tomme lister
bases_exon= [] #opretter introns og exons med tilhørende model

for i in partitions_intron:
    if "-" in i:
        bases_intron.append(i) #tilføjer element til bases_intron, hver gang den støder på en -
for n in range(len(bases_intron)): #kører ligeså mange gange som der er elementer i bases_intron
        partitions=partitions +"\t charset intron_"+str(n)+" = "+str(bases_intron[n])+";\n" #navngiver hver intron, charset intron_1, osv. (adskiller data fra hinanden)
        names=names+"intron_"+str(n)+", " #navngiver hver intron intron_1
partitions=partitions[:-3]+";\n" #fjerner de sidste tre tegn fra partitions og tilføjer ; og linjeskift (så mrbayes kan læse den, fordi ; betyder stop i mrbayes)

for b in partitions_exon:
    if "-" in b:
        bases_exon.append(b)
for n in range(len(bases_exon)):
        partitions=partitions +"\t charset exon_"+str(n)+" = "+str(bases_exon[n])+";\n"
        names=names+"exon_"+str(n)+", "
partitions=partitions[:-3]+";\n"


begin= "begin mrbayes;\n\n" #starter mrbayes
autoclose= "\t set autoclose=yes; [makes automatic execution]\n" #programmet lukker efter det har kørt
make_log= "\t log start filename="+genes+".log replace;\n" #laver logs
file_to_execute= "\t Execute /home/augusthcs/Bachelorprojekt/AMAS/"+genes+".fasta-out.nex;\n" #filer til brug
defining_partition= "\t partition types ="+str(len(bases_exon)+len(bases_intron))+":"+names[:-2]+";\n \t set partition = types;\n" # definerer partitiontypes?
prset_all="prset applyto=(all) ratepr=variable;\n" #indstiller til at kunne køre forskellige modeller på alle partitions
unlink= " unlink revmat=(all) pinvar=(all) shape=(all) statefreq=(all); \n" #søg efter funktioner på mrbayes manual (skal frigøre de variable, så partitions kan køre forskellige modeller)

block= [begin,autoclose, str(make_log), str(file_to_execute), partitions, str(defining_partition),prset_all, unlink] #opretter mrbayesblock

#taking model from IQtree and defining the model for the MrBayes block
models=[charset[5],charset[6]] #tager 6 og 7 element i charset, det er modeller til introns og exons

list_for_iteration= names[:-2].split(", ") #splitter names strengen ved hvert komma uden de sidste to elementer
for nr,name in enumerate(list_for_iteration, start=1): #giver numre til de forskellige værdier, så der kan indstilles variable passende til de enkelte partitions
    if "intron" in name:
        i =models[0]
    elif "exon" in name:
         i=models[1] #giver forskellige modeller til exons og introns

    if "GTR" in i or "SYM" in i: #i = modellen, lader forskellige modeller blive brugt alt efter hvad information der står om modellen
        nucleotide_model ="\t lset applyto=("+str(nr)+") nst=6 "
    elif "HKY" in i or "HKY85" in i or "K80" in i or "K2P" in i:
        nucleotide_model= "\t lset applyto=("+str(nr)+") nst=2 "
    elif "F81" in i or "JC69" in i or "JC" in i:
         nucleotide_model= "\t lset applyto=("+str(nr)+") nst=1 "
    else:
         nucleotide_model= "not recognized" 


    if "SYM" in i or "JC" in i or "JC69" in i or "K80" in i or "K2P" in i or "+FQ" in i: #hvis disse modeller benyttes sættes nukleotidfrekvenserne til at være lige?
          base_freq= "\t prset applyto=("+str(nr)+") statefreqpr= fixed(equal); \n"
    else:
         base_freq=""

    #rate varation
    #If IQtree gives I
    if "+I" in i and "+G" not in i:
        rate_variation= " rates=propinv ; \n" #invariabel = en hvis procentdel af baserne ændres ikke
    #If IQtree gives G
    elif "+G" in i and "+I" not in i:
        start = "+G"
        end = ":"
        index_s = i.partition(start)
        ngammacat=str(index_s[2]).partition(end)
        rate_variation= " rates=gamma ngammacat="+ngammacat[0]+"; \n" #indsætter gammafordeling på de forskellige nukleotider + hvor mange forskellige rater der ønskes
    #If IQtree gives G+I
    elif "+I" in i and "+G" in i:
        start = "+G"
        end = ":"
        index_s = i.partition(start)
        ngammacat=str(index_s[2]).partition(end)
        rate_variation= " rates=invgamma ngammacat="+ngammacat[0]+"; \n" #kombinerer de to ovenfor
    else:
        rate_variation= "; \n" 

    block.append(str(nucleotide_model)+str(rate_variation))
    block.append(str(base_freq))


block.append("\t mcmc ngen=5000000 samplefreq=5000 printfreq=5000 diagnfreq=5000;\n ") #5 mio generationer 
block.append("\t sump;\n")
block.append("END;")

#Write MrBayes block
MrBayes_block = open(genes+"_MrBayes_block.nex", 'w')

for i in block:
      MrBayes_block.write(i)